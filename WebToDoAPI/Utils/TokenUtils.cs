using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using WebToDoAPI.Configuration;
using WebToDoAPI.Data;

namespace WebToDoAPI.Utils
{
    public static class TokenUtils
    {
        public const string JwtRegisteredClaimNameId = "Id";
        public const string JwtRegisteredClaimNameRoles = "Role";

        public static string Uid(this ClaimsPrincipal userPrincipal)
        {
            return userPrincipal?.FindFirstValue(JwtRegisteredClaimNameId);
        }

        public static string GenerateJwtToken(JwtConfig jwtConfig, ApplicationUser user, UserManager<ApplicationUser> userManager)
        {
            var tokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the app settings
            var key = Encoding.ASCII.GetBytes(jwtConfig.Secret);

            var claims = new List<Claim>
            {
                new(JwtRegisteredClaimNameId, user.Id),
                new (JwtRegisteredClaimNames.Sub, user.Email),
                new (JwtRegisteredClaimNames.Email, user.Email),
                // this guarantees the token is unique
                new (JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())

            };

            List<string> userRoles = new List<string>(2);
            var roles = userManager.GetRolesAsync(user).Result;
            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }


            // we define our token descriptor
            // We need to utilize claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims.ToArray()),
                Expires = DateTime.UtcNow.AddHours(jwtConfig.ExpirationHours),
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = tokenHandler.WriteToken(token);

            return jwtToken;
        }
    }
}
